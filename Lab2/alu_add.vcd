$date
	Thu Sep 16 03:09:44 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module alu_top $end
$scope module alu $end
$var wire 4 ! a [3:0] $end
$var wire 1 " arith $end
$var wire 4 # b [3:0] $end
$var wire 1 $ cin $end
$var wire 1 % invert $end
$var wire 1 & pass $end
$var wire 4 ' y [3:0] $end
$var wire 4 ( s0 [3:0] $end
$var wire 1 ) overfl $end
$var wire 1 * cout $end
$scope module and_add_i1 $end
$var wire 1 " add $end
$var wire 4 + b [3:0] $end
$var wire 1 $ cin $end
$var wire 1 & pass $end
$var wire 4 , y [3:0] $end
$var wire 4 - s2 [3:0] $end
$var wire 4 . s1 [3:0] $end
$var wire 4 / s0 [3:0] $end
$var wire 1 ) overfl $end
$var wire 1 * cout $end
$var wire 4 0 a [3:0] $end
$scope module four_bit_adder_i0 $end
$var wire 4 1 b [3:0] $end
$var wire 1 $ cin $end
$var wire 1 * cout $end
$var wire 1 ) overfl $end
$var wire 4 2 y [3:0] $end
$var wire 1 3 s9 $end
$var wire 1 4 s8 $end
$var wire 1 5 s7 $end
$var wire 1 6 s6 $end
$var wire 1 7 s5 $end
$var wire 1 8 s4 $end
$var wire 1 9 s3 $end
$var wire 1 : s2 $end
$var wire 1 ; s14 $end
$var wire 1 < s13 $end
$var wire 1 = s12 $end
$var wire 1 > s11 $end
$var wire 1 ? s10 $end
$var wire 1 @ s1 $end
$var wire 1 A s0 $end
$var wire 1 B cout_temp $end
$var wire 4 C a [3:0] $end
$scope module full_adder_i0 $end
$var wire 1 = a $end
$var wire 1 < b $end
$var wire 1 $ cin $end
$var wire 1 ? cout $end
$var wire 1 ; sum $end
$upscope $end
$scope module full_adder_i1 $end
$var wire 1 4 a $end
$var wire 1 3 b $end
$var wire 1 ? cin $end
$var wire 1 6 cout $end
$var wire 1 > sum $end
$upscope $end
$scope module full_adder_i2 $end
$var wire 1 8 a $end
$var wire 1 7 b $end
$var wire 1 6 cin $end
$var wire 1 A cout $end
$var wire 1 5 sum $end
$upscope $end
$scope module full_adder_i3 $end
$var wire 1 @ a $end
$var wire 1 : b $end
$var wire 1 A cin $end
$var wire 1 B cout $end
$var wire 1 9 sum $end
$upscope $end
$upscope $end
$scope module four_bit_mux_i1 $end
$var wire 4 D a [3:0] $end
$var wire 4 E b [3:0] $end
$var wire 1 " sel $end
$var wire 4 F y [3:0] $end
$var wire 1 G s9 $end
$var wire 1 H s8 $end
$var wire 1 I s7 $end
$var wire 1 J s6 $end
$var wire 1 K s5 $end
$var wire 1 L s4 $end
$var wire 1 M s3 $end
$var wire 1 N s2 $end
$var wire 1 O s11 $end
$var wire 1 P s10 $end
$var wire 1 Q s1 $end
$var wire 1 R s0 $end
$scope module two_bit_mux_i0 $end
$var wire 1 R a $end
$var wire 1 Q b $end
$var wire 1 " s $end
$var wire 1 N y $end
$upscope $end
$scope module two_bit_mux_i1 $end
$var wire 1 M a $end
$var wire 1 L b $end
$var wire 1 " s $end
$var wire 1 K y $end
$upscope $end
$scope module two_bit_mux_i2 $end
$var wire 1 J a $end
$var wire 1 I b $end
$var wire 1 " s $end
$var wire 1 H y $end
$upscope $end
$scope module two_bit_mux_i3 $end
$var wire 1 G a $end
$var wire 1 P b $end
$var wire 1 " s $end
$var wire 1 O y $end
$upscope $end
$upscope $end
$scope module four_bit_mux_i2 $end
$var wire 4 S a [3:0] $end
$var wire 1 & sel $end
$var wire 4 T y [3:0] $end
$var wire 1 U s9 $end
$var wire 1 V s8 $end
$var wire 1 W s7 $end
$var wire 1 X s6 $end
$var wire 1 Y s5 $end
$var wire 1 Z s4 $end
$var wire 1 [ s3 $end
$var wire 1 \ s2 $end
$var wire 1 ] s11 $end
$var wire 1 ^ s10 $end
$var wire 1 _ s1 $end
$var wire 1 ` s0 $end
$var wire 4 a b [3:0] $end
$scope module two_bit_mux_i0 $end
$var wire 1 ` a $end
$var wire 1 _ b $end
$var wire 1 & s $end
$var wire 1 \ y $end
$upscope $end
$scope module two_bit_mux_i1 $end
$var wire 1 [ a $end
$var wire 1 Z b $end
$var wire 1 & s $end
$var wire 1 Y y $end
$upscope $end
$scope module two_bit_mux_i2 $end
$var wire 1 X a $end
$var wire 1 W b $end
$var wire 1 & s $end
$var wire 1 V y $end
$upscope $end
$scope module two_bit_mux_i3 $end
$var wire 1 U a $end
$var wire 1 ^ b $end
$var wire 1 & s $end
$var wire 1 ] y $end
$upscope $end
$upscope $end
$upscope $end
$scope module not_neg_i0 $end
$var wire 4 b a [3:0] $end
$var wire 1 % invert $end
$var wire 1 " neg $end
$var wire 1 c s0 $end
$var wire 4 d y [3:0] $end
$var wire 4 e s1 [3:0] $end
$var wire 1 f cry $end
$scope module incrementer_i0 $end
$var wire 4 g a [3:0] $end
$var wire 1 c inc $end
$var wire 4 h y [3:0] $end
$var wire 1 i s9 $end
$var wire 1 j s8 $end
$var wire 1 k s7 $end
$var wire 1 l s6 $end
$var wire 1 m s5 $end
$var wire 1 n s4 $end
$var wire 1 o s3 $end
$var wire 1 p s2 $end
$var wire 1 q s10 $end
$var wire 1 r s1 $end
$var wire 1 s s0 $end
$var wire 1 f cry $end
$scope module half_adder_i0 $end
$var wire 1 i a $end
$var wire 1 c b $end
$var wire 1 k cry $end
$var wire 1 q sum $end
$upscope $end
$scope module half_adder_i1 $end
$var wire 1 l a $end
$var wire 1 k b $end
$var wire 1 n cry $end
$var wire 1 j sum $end
$upscope $end
$scope module half_adder_i2 $end
$var wire 1 o a $end
$var wire 1 n b $end
$var wire 1 r cry $end
$var wire 1 m sum $end
$upscope $end
$scope module half_adder_i3 $end
$var wire 1 s a $end
$var wire 1 r b $end
$var wire 1 f cry $end
$var wire 1 p sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0s
0r
1q
0p
0o
0n
0m
0l
0k
0j
1i
b1 h
b1 g
0f
b1 e
b1 d
0c
b1 b
b1 a
0`
0_
1^
1]
0\
0[
0Z
0Y
1X
0W
1V
1U
b11 T
b11 S
0R
0Q
1P
1O
0N
0M
0L
0K
0J
1I
1H
0G
b11 F
b11 E
b0 D
b1 C
0B
0A
0@
0?
1>
1=
0<
1;
0:
09
08
07
06
05
04
13
b11 2
b10 1
b1 0
b11 /
b0 .
b11 -
b11 ,
b10 +
0*
0)
b1 (
b11 '
0&
0%
0$
b10 #
1"
b1 !
$end
#10
0]
0U
0O
b0 '
b0 ,
b0 T
0V
0P
0X
0;
b0 -
b0 F
b0 S
0H
0^
0=
0I
b0 (
b0 0
b0 C
b0 a
b0 d
b0 h
0q
b0 /
b0 2
b0 E
0>
0i
b0 e
b0 g
03
b0 #
b0 +
b0 1
b0 !
b0 b
#80
